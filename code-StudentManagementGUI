import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.util.ArrayList;

class Student implements Serializable {
    private String name;
    private int rollNumber;
    private char grade;

    public Student(String name, int rollNumber, char grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    public String getName() {
        return name;
    }

    public int getRollNumber() {
        return rollNumber;
    }

    public char getGrade() {
        return grade;
    }

    @Override
    public String toString() {
        return "Student [Name: " + name + ", Roll Number: " + rollNumber + ", Grade: " + grade + "]";
    }
}

class StudentManagementSystem {
    private ArrayList<Student> studentList = new ArrayList<>();
    private String dataFileName = "student_data.ser";

    public void addStudent(Student student) {
        studentList.add(student);
    }

    public void removeStudent(int rollNumber) {
        studentList.removeIf(student -> student.getRollNumber() == rollNumber);
    }

    public Student searchStudent(int rollNumber) {
        for (Student student : studentList) {
            if (student.getRollNumber() == rollNumber) {
                return student;
            }
        }
        return null; // Student not found
    }

    public ArrayList<Student> getAllStudents() {
        return studentList;
    }

    public void saveToFile() {
        try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(dataFileName))) {
            outputStream.writeObject(studentList);
            System.out.println("Student data saved to " + dataFileName);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    public void loadFromFile() {
        try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(dataFileName))) {
            studentList = (ArrayList<Student>) inputStream.readObject();
            System.out.println("Student data loaded from " + dataFileName);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

public class StudentManagementGUI {
    private StudentManagementSystem sms = new StudentManagementSystem();
    private JFrame frame;
    private JTextArea textArea;
    private JTextField inputField;

    private enum MenuOption {
        ADD_STUDENT,
        REMOVE_STUDENT,
        SEARCH_STUDENT,
        DISPLAY_ALL_STUDENTS,
        SAVE_TO_FILE,
        EXIT
    }

    private MenuOption currentOption = null;

    public StudentManagementGUI() {
        frame = new JFrame("Student Management System");
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);
        panel.setLayout(new BorderLayout());

        textArea = new JTextArea(10, 40);
        textArea.setEditable(false);
        panel.add(new JScrollPane(textArea), BorderLayout.CENTER);

        JPanel inputPanel = new JPanel(new GridLayout(2, 1));
        panel.add(inputPanel, BorderLayout.NORTH);

        inputField = new JTextField();
        inputPanel.add(inputField);

        JPanel buttonPanel = new JPanel();
        panel.add(buttonPanel, BorderLayout.SOUTH);

        JButton addButton = new JButton("Add Student");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setCurrentOption(MenuOption.ADD_STUDENT);
                processUserInput();
            }
        });

        JButton removeButton = new JButton("Remove Student");
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setCurrentOption(MenuOption.REMOVE_STUDENT);
                processUserInput();
            }
        });

        JButton searchButton = new JButton("Search Student");
        searchButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setCurrentOption(MenuOption.SEARCH_STUDENT);
                processUserInput();
            }
        });

        JButton displayButton = new JButton("Display All Students");
        displayButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setCurrentOption(MenuOption.DISPLAY_ALL_STUDENTS);
                processUserInput();
            }
        });

        JButton saveButton = new JButton("Save Data to File");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setCurrentOption(MenuOption.SAVE_TO_FILE);
                processUserInput();
            }
        });

        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(displayButton);
        buttonPanel.add(saveButton);

        sms.loadFromFile(); // Load existing student data (if available)
        showMenuOptions();
    }

    private void setCurrentOption(MenuOption option) {
        currentOption = option;
    }

    private void processUserInput() {
        String inputText = inputField.getText();
        switch (currentOption) {
            case ADD_STUDENT:
                addStudentDialog();
                break;
            case REMOVE_STUDENT:
                removeStudentDialog();
                break;
            case SEARCH_STUDENT:
                searchStudentDialog();
                break;
            case DISPLAY_ALL_STUDENTS:
                displayAllStudents();
                break;
            case SAVE_TO_FILE:
                saveToFile();
                break;
            case EXIT:
                saveToFile();
                System.out.println("Exiting Student Management System.");
                System.exit(0);
                break;
        }
        inputField.setText("");
        showMenuOptions(); // Show the menu options after processing user input
    }
    
    

    private void showMenuOptions() {
        StringBuilder menuText = new StringBuilder("Choose an option:\n");
        for (MenuOption option : MenuOption.values()) {
            menuText.append(option.ordinal() + 1).append(". ").append(option.name()).append("\n");
        }
        textArea.setText(menuText.toString());
    }

    private void addStudentDialog() {
        JTextField nameField = new JTextField();
        JTextField rollNumberField = new JTextField();
        JTextField gradeField = new JTextField();

        Object[] message = {
            "Name:", nameField,
            "Roll Number:", rollNumberField,
            "Grade:", gradeField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Add Student", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            int rollNumber = Integer.parseInt(rollNumberField.getText());
            char grade = gradeField.getText().charAt(0);
            
            addStudent(new Student(name, rollNumber, grade));
        }
    }

    private void removeStudentDialog() {
        JTextField rollNumberField = new JTextField();

        Object[] message = {
            "Roll Number:", rollNumberField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Remove Student", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            int rollNumber = Integer.parseInt(rollNumberField.getText());
            removeStudent(rollNumber);
        }
    }

    private void searchStudentDialog() {
        JTextField rollNumberField = new JTextField();

        Object[] message = {
            "Roll Number:", rollNumberField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Search Student", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            int rollNumber = Integer.parseInt(rollNumberField.getText());
            searchStudent(rollNumber);
        }
    }

    private void addStudent(Student student) {
        sms.addStudent(student);
    }

    private void removeStudent(int rollNumber) {
        sms.removeStudent(rollNumber);
    }

    // private void searchStudentDialog() {
    //     JTextField rollNumberField = new JTextField();
    
    //     Object[] message = {
    //         "Roll Number:", rollNumberField
    //     };
    
    //     int option = JOptionPane.showConfirmDialog(null, message, "Search Student", JOptionPane.OK_CANCEL_OPTION);
    
    //     if (option == JOptionPane.OK_OPTION) {
    //         int rollNumber = Integer.parseInt(rollNumberField.getText());
    //         searchStudent(rollNumber);
    //     }
    // }
    
    private void searchStudent(int rollNumber) {
        Student student = sms.searchStudent(rollNumber);
        if (student != null) {
            textArea.setText("Student Found: " + student);
        } else {
            textArea.setText("Student not found.");
        }
    }
    
    private void displayAllStudents() {
        ArrayList<Student> students = sms.getAllStudents();
        if (students.isEmpty()) {
            textArea.setText("No students found.");
        } else {
            StringBuilder studentsText = new StringBuilder("All Students:\n");
            for (Student student : students) {
                studentsText.append(student).append("\n");
            }
            textArea.setText(studentsText.toString());
        }
    }
    

    private void saveToFile() {
        sms.saveToFile();
    }

    public void displayGUI() {
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            StudentManagementGUI gui = new StudentManagementGUI();
            gui.displayGUI();
        });
    }
}
